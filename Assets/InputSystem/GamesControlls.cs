//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/GamesControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamesControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamesControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamesControlls"",
    ""maps"": [
        {
            ""name"": ""Snake"",
            ""id"": ""af82fdee-ef6f-457d-9bcb-424ca922a38a"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""eb820bab-12d8-4e02-aaeb-ee1e076889fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""2dbba9f6-8942-4f31-97fd-48a164ad149b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""cd418bad-f241-4891-ac43-a9a02af375f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""58093825-c82e-40d7-8796-abd6dd80459e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33622312-7739-42d5-8006-84a0641587d1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24919298-9e5b-4f81-b175-566e13efbf9b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb347278-6bc5-4db8-b450-d959c7c14c4f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""452e7b4a-6e65-411d-99f9-ce37a02b3881"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FlappyBird"",
            ""id"": ""5e88d8bd-c136-47a4-985f-4e205ce43833"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""aaaa1953-c8f2-4ade-843e-c16de7d70214"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b4634d2-8e95-4ba0-9b71-f3c6fd37e8e6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Snake
        m_Snake = asset.FindActionMap("Snake", throwIfNotFound: true);
        m_Snake_Up = m_Snake.FindAction("Up", throwIfNotFound: true);
        m_Snake_Down = m_Snake.FindAction("Down", throwIfNotFound: true);
        m_Snake_Right = m_Snake.FindAction("Right", throwIfNotFound: true);
        m_Snake_Left = m_Snake.FindAction("Left", throwIfNotFound: true);
        // FlappyBird
        m_FlappyBird = asset.FindActionMap("FlappyBird", throwIfNotFound: true);
        m_FlappyBird_Click = m_FlappyBird.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Snake
    private readonly InputActionMap m_Snake;
    private ISnakeActions m_SnakeActionsCallbackInterface;
    private readonly InputAction m_Snake_Up;
    private readonly InputAction m_Snake_Down;
    private readonly InputAction m_Snake_Right;
    private readonly InputAction m_Snake_Left;
    public struct SnakeActions
    {
        private @GamesControlls m_Wrapper;
        public SnakeActions(@GamesControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Snake_Up;
        public InputAction @Down => m_Wrapper.m_Snake_Down;
        public InputAction @Right => m_Wrapper.m_Snake_Right;
        public InputAction @Left => m_Wrapper.m_Snake_Left;
        public InputActionMap Get() { return m_Wrapper.m_Snake; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnakeActions set) { return set.Get(); }
        public void SetCallbacks(ISnakeActions instance)
        {
            if (m_Wrapper.m_SnakeActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnDown;
                @Right.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnRight;
                @Left.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnLeft;
            }
            m_Wrapper.m_SnakeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
            }
        }
    }
    public SnakeActions @Snake => new SnakeActions(this);

    // FlappyBird
    private readonly InputActionMap m_FlappyBird;
    private IFlappyBirdActions m_FlappyBirdActionsCallbackInterface;
    private readonly InputAction m_FlappyBird_Click;
    public struct FlappyBirdActions
    {
        private @GamesControlls m_Wrapper;
        public FlappyBirdActions(@GamesControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_FlappyBird_Click;
        public InputActionMap Get() { return m_Wrapper.m_FlappyBird; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlappyBirdActions set) { return set.Get(); }
        public void SetCallbacks(IFlappyBirdActions instance)
        {
            if (m_Wrapper.m_FlappyBirdActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_FlappyBirdActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_FlappyBirdActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_FlappyBirdActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_FlappyBirdActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public FlappyBirdActions @FlappyBird => new FlappyBirdActions(this);
    public interface ISnakeActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
    }
    public interface IFlappyBirdActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
